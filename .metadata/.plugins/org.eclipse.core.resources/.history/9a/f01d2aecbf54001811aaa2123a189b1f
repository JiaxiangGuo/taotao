package com.taotao.content.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.taotao.common.pojo.EasyUITreeNode;
import com.taotao.common.pojo.TaotaoResult;
import com.taotao.content.service.ContentCategoryService;
import com.taotao.mapper.TbContentCategoryMapper;
import com.taotao.pojo.TbContentCategory;
import com.taotao.pojo.TbContentCategoryExample;
import com.taotao.pojo.TbContentCategoryExample.Criteria;
import com.taotao.utils.IDUtils;
/**
 * 内容分类管理
 * @author Guojiaxiang
 *
 */
@Service
public class ContentCategoryServiceImpl implements ContentCategoryService{

	@Autowired
	private TbContentCategoryMapper contentCategoryMapper;
	/*
	 * 获取分类列表
	 */
	public List<EasyUITreeNode> getContentCategoryList(long parentId) {
		//根据parentId查询子节点列表
		TbContentCategoryExample example = new TbContentCategoryExample();
		//设置查询条件
		Criteria criteria = example.createCriteria();
		criteria.andParentIdEqualTo(parentId);
		//执行查询
		List<TbContentCategory> list = contentCategoryMapper.selectByExample(example);
		//将
		List<EasyUITreeNode> resultList = new ArrayList<>();
		for (TbContentCategory contentCategory : list) {
			EasyUITreeNode node = new EasyUITreeNode();
			node.setId(contentCategory.getId());
			node.setText(contentCategory.getName());
			node.setState(contentCategory.getIsParent()?"closed":"open");
			resultList.add(node);
		}
		
		return resultList;
	}
	
	/*
	 * 添加内容分类
	 */
	public TaotaoResult addContentCategory(TbContentCategory contentCategory) {
		contentCategory.setId(IDUtils.getItemId());
		contentCategory.setIsParent(false);
		contentCategory.setSortOrder(1);
		contentCategory.setStatus(1);
		contentCategory.setCreated(new Date());
		contentCategory.setUpdated(new Date());
		contentCategoryMapper.insert(contentCategory);
		TbContentCategory category = new TbContentCategory();
		category.setId(contentCategory.getParentId());
		category.setIsParent(true);
		contentCategoryMapper.updateByPrimaryKeySelective(category);
		return TaotaoResult.ok(contentCategory);
	}

	/*
	 * 修改内容分类
	 */
	public void editContentCategory(TbContentCategory contentCategory) {
		contentCategoryMapper.updateByPrimaryKeySelective(contentCategory);
	}

	/*
	 * 删除内容分类
	 */
	public TaotaoResult delContentCategory(long id) {
		TbContentCategoryExample example = new TbContentCategoryExample();
		Criteria criteria = example.createCriteria();
		criteria.andIdEqualTo(id);
		TbContentCategory category = (TbContentCategory) contentCategoryMapper.selectByExample(example);
		contentCategoryMapper.deleteByExample(example);
		TbContentCategoryExample example1 = new TbContentCategoryExample();
		Criteria criteria1 = example1.createCriteria();
		criteria1.andParentIdEqualTo(category.getId());
		List<TbContentCategory> list = contentCategoryMapper.selectByExample(example1);
		for (TbContentCategory tbContentCategory : list) {
			contentCategoryMapper.deleteByPrimaryKey(tbContentCategory.getId());
		}
		return TaotaoResult.ok();
	}

}
